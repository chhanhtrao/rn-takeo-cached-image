{"version":3,"sources":["CachedImage.tsx"],"names":["React","Image","RNSF","useMediaDb","download","uri","localURI","remoteUri","promise","downloadFile","fromUrl","toFile","getLocalURI","db","Promise","resolve","undefined","transaction","tx","executeSql","_tx","result","localUri","rows","item","local_uri","DocumentDirectoryPath","split","pop","then","_res","tx1","catch","err","console","log","CachedImage","props","source","setLocalUri","useState","imageProps","useEffect"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Image, ImageProps} from 'react-native';\nimport * as RNSF from 'react-native-fs';\nimport {SQLiteDatabase} from 'react-native-sqlite-storage';\nimport {useMediaDb} from '../hook/database';\n\nconst download = (uri: string, localURI: string) => {\n  const remoteUri = uri;\n\n  const {promise} = RNSF.downloadFile({\n    fromUrl: remoteUri,\n    toFile: localURI,\n  });\n  return promise;\n};\n\nexport const getLocalURI = (\n  remoteUri: string,\n  db?: SQLiteDatabase,\n): Promise<any> => {\n  return new Promise(resolve => {\n    if (db === undefined) {\n      return resolve(null);\n    }\n\n    db.transaction((tx: any) => {\n      tx.executeSql(\n        'SELECT * FROM media WHERE remote_uri=?',\n        [remoteUri],\n        (_tx: any, result: any) => {\n          let localUri = result.rows.item(0)?.local_uri;\n          if (localUri !== undefined) {\n            return resolve(localUri);\n          }\n          localUri =\n            RNSF.DocumentDirectoryPath + '/' + remoteUri.split('/').pop();\n          download(remoteUri, localUri)\n            .then((_res: any) => {\n              resolve(localUri);\n              db.transaction((tx1: any) => {\n                tx1.executeSql(\n                  'INSERT INTO media (\"remote_uri\", \"local_uri\") VALUES (?1, ?2);',\n                  [remoteUri, localUri],\n                );\n              });\n            })\n            .catch(err => {\n              console.log('error on saving new media record', err);\n            });\n        },\n      );\n    });\n  });\n};\n\nexport const CachedImage = (props: ImageProps) => {\n  const source: any = props?.source;\n  const db = useMediaDb();\n  const [localUri, setLocalUri] = React.useState();\n  const imageProps = {...props, source: {...source, uri: localUri}};\n\n  React.useEffect(() => {\n    if (db === undefined) {\n      return;\n    }\n    getLocalURI(source?.uri, db).then(uri => {\n      setLocalUri(uri);\n    });\n  }, [db, source?.uri]);\n\n  return <Image {...imageProps} />;\n};\n"]}